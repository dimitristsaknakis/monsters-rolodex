{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","href","rel","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAKaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,WAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCJjBC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAIQD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCR1BO,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoDPG,E,kDAzDX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAoBVa,aAAe,SAACI,GAGZ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SApBtC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IANF,E,qDAWnB,WAAqB,IAAD,OAEhBI,MAAM,8CAEDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAUjD,WAEI,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YAGZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC5CA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAGpD,OACI,sBAAK9B,UAAU,MAAf,UACI,kDAEA,cAAC,EAAD,CACIW,YAAY,kBACZC,aAAce,KAAKf,eAGvB,cAAC,EAAD,CAAUJ,SAAUoB,IACpB,sGAEI,mBAAGI,KAAK,wEAAwEC,IAAI,aAAad,OAAO,SAAxG,kF,GAjDFe,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d3ea36c3.chunk.js","sourcesContent":["/* Rendered by CardList */\n\nimport React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = (props) => {\n    return (\n        <div className=\"card-container\">\n            <img src={`https://robohash.org/${props.monster.id}?set=set5&size=180x180`} alt=\"Avatar\" />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    );\n};","/* Rendered by App */\n\nimport React from \"react\";\nimport \"./card-list.styles.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n    return (\n        <div className=\"card-list\">\n            {\n                // Create Card components for each monster of props.monsters\n                // passed from App. Pass monster prop down to Card component\n                props.monsters.map(monster => (\n                    <Card key={monster.id} monster={monster} />\n                ))\n            }\n        </div>\n    );\n};\n\n// export default CardList; // doesn't require { } on component import, and can be any name\n// export { CardList }; // requires { } on component import, and must be same name","/* Rendered in App */\n\nimport React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    return (\n        <input\n            className=\"search\"\n            type=\"search\"\n            placeholder={placeholder}\n            onChange={handleChange} // event handler method passed from App\n        />\n    );\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props); // calls superclass constructor function\n\n        // This is the component's state, with its props & their attributes\n        this.state = {\n            monsters: [], // initially empty; data from JSONPlaceholder's API\n            searchField: \"\" // stores what the user types in the search field\n        };\n    }\n\n    // Lifecycle methods\n    componentDidMount() {\n        // Make API request to jsonplaceholder; gets a Promise object as response\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            // This gets another Promise object with the body in JSON format\n            .then(response => response.json()) // get Promise with body in JSON\n            // This sets the component state with the JSON body data\n            .then(users => this.setState({ monsters: users }));\n    };\n\n    // Handler methods\n    handleChange = (e) => {\n        // Sets a state prop to the event target value on an event (onChange,\n        // from the SearchBox component's input)\n        this.setState({ searchField: e.target.value });\n    };\n\n    render() {\n        // Destructure state object properties into constants (use same name)\n        const { monsters, searchField } = this.state;\n        // Create new array with filtered monster names, keeping the ones that\n        // have what the user types in the searchField\n        const filteredMonsters = monsters.filter(monster =>\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\n        );\n\n        return (\n            <div className=\"App\">\n                <h1>Monsters Rolodex</h1>\n                {/* Pass props of placeholder and an (onChange) event handler */}\n                <SearchBox\n                    placeholder=\"search monsters\"\n                    handleChange={this.handleChange}\n                />\n                {/* pass as props only ones that match what the user has typed */}\n                <CardList monsters={filteredMonsters} />\n                <footer>\n                    Made with &hearts; after following along the first chapters of&nbsp;\n                    <a href=\"https://www.udemy.com/course/complete-react-developer-zero-to-mastery\" rel=\"noreferrer\" target=\"_blank\">\n                        Complete React Developer in 2021 (w/Redux, Hooks, GraphQL)\n                    </a>\n                </footer>\n            </div>\n        ); // end return\n    }; // end render\n}; // end App\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}